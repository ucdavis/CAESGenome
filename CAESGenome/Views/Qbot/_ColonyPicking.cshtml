@using CAESGenome.Core.Resources
@model QbotViewModel

@using(Html.BeginForm("Create", "Qbot", new {id=Model.JobType.Id}, FormMethod.Post, new {@class="form-horizontal"}))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(false)  
    
    <div class="control-group">
        <fieldset>
            <div class="control-group">
                @Html.LabelFor(model => model.PostModel.Name, new {@class = "control-label"})
                <div class="controls">
                    @Html.EditorFor(model => model.PostModel.Name)
                    @Html.ValidationMessageFor(model => model.PostModel.Name)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(model => model.PostModel.RechargeAccount, new {@class = "control-label"})
                <div class="controls">
                    @Html.Partial("_selectList", new SelectListModel("PostModel.RechargeAccount", Model.RechargeAccounts, "--Select Recharge--"))
                    @Html.ValidationMessageFor(model => model.PostModel.RechargeAccount)
                </div>
            </div>
            <div class="control-group" id="platetypes">
                @Html.LabelFor(model => model.PostModel.PlateType, new {@class = "control-label"})
                <div class="controls">
                    @foreach(var pt in Model.PlateTypes)
                    {
                        <label class="radio inline">
                            @Html.RadioButton("PostModel.PlateType", pt.Value, pt.Selected)    
                            @pt.Text
                        </label>    
                    }
                    @Html.ValidationMessageFor(model => model.PostModel.PlateType)
                </div>
            </div>
            <div class="control-group" id="numQTrays" style="@(Model.PostModel.PlateType.HasValue && Model.PostModel.PlateType == PlateTypes.QTray ? "display:block;" : "display:none;")">
                @Html.LabelFor(model => model.PostModel.NumQTrays, new {@class = "control-label"})
                <div class="controls">
                    @Html.EditorFor(model => model.PostModel.NumQTrays)
                    @Html.ValidationMessageFor(model => model.PostModel.NumQTrays)
                </div>
            </div>
            <div class="control-group" id="concentration" style="@(Model.PostModel.PlateType.HasValue && Model.PostModel.PlateType == PlateTypes.GlycerolStock ? "display:block;" : "display:none;")">
                @Html.LabelFor(model => model.PostModel.Concentration, new {@class = "control-label"})
                <div class="controls">
                    @Html.EditorFor(model => model.PostModel.Concentration)
                    @Html.ValidationMessageFor(model => model.PostModel.Concentration)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(model => model.PostModel.Replication, new {@class = "control-label"})
                <div class="controls">
                    @Html.EditorFor(model => model.PostModel.Replication)
                    @Html.ValidationMessageFor(model => model.PostModel.Replication)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(model => model.PostModel.NumColonies, new {@class = "control-label"})
                <div class="controls">
                    @Html.EditorFor(model => model.PostModel.NumColonies)
                    @Html.ValidationMessageFor(model => model.PostModel.NumColonies)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(model => model.PostModel.Vector, new {@class = "control-label"})
                <div class="controls">
                    @Html.Partial("_selectList", new SelectListModel("PostModel.Vector", Model.Vectors, "--Select Vector--"))
                    @Html.ValidationMessageFor(model => model.PostModel.Vector)
                </div>
            </div>
            <div id="newvector" style="@(Model.PostModel.Vector != null && Model.PostModel.Vector.Name.ToLower() == "other" ? "display:block;" : "display:none;")">
                <div class="control-group">
                    @Html.LabelFor(model => model.PostModel.NewVector, new {@class = "control-label"})
                    <div class="controls">
                        @Html.EditorFor(model => model.PostModel.NewVector)
                        @Html.ValidationMessageFor(model => model.PostModel.NewVector)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(model => model.PostModel.VectorType, new {@class = "control-label"})
                    <div class="controls">
                        @Html.Partial("_selectList", new SelectListModel("PostModel.VectorType", Model.VectorTypes, "--Select Vector Type--"))
                        @Html.ValidationMessageFor(model => model.PostModel.VectorType)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(model => model.PostModel.Antibiotic1, new {@class = "control-label"})
                    <div class="controls">
                        @Html.Partial("_selectList", new SelectListModel("PostModel.Antibiotic1", Model.Antibiotic1, "--Select Antibiotic--"))
                        @Html.ValidationMessageFor(model => model.PostModel.Antibiotic1)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(model => model.PostModel.Antibiotic2, new {@class = "control-label"})
                    <div class="controls">
                        @Html.Partial("_selectList", new SelectListModel("PostModel.Antibiotic2", Model.Antibiotic2, "--Select Antibiotic--"))
                        @Html.ValidationMessageFor(model => model.PostModel.Antibiotic2)
                    </div>
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(model => model.PostModel.Strain, new {@class = "control-label"})
                <div class="controls">
                    @Html.Partial("_selectList", new SelectListModel("PostModel.Strain", Model.Strains, "--Select Host--"))
                    @Html.ValidationMessageFor(model => model.PostModel.Strain)
                </div>
            </div>
            <div id="newstrain" style="@(Model.PostModel.Strain != null && Model.PostModel.Strain.Name.ToLower() == "other" ? "display:block;" : "display:none;")">
                <div class="control-group">
                    @Html.LabelFor(model => model.PostModel.NewStrain, new {@class = "control-label"})
                    <div class="controls">
                        @Html.EditorFor(model => model.PostModel.NewStrain)
                        @Html.ValidationMessageFor(model => model.PostModel.NewStrain)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(model => model.PostModel.Bacteria, new {@class = "control-label"})
                    <div class="controls">
                        @Html.Partial("_selectList", new SelectListModel("PostModel.Bacteria", Model.Bacterias, "--Select Antibiotic--"))
                        @Html.ValidationMessageFor(model => model.PostModel.Bacteria)
                    </div>
                </div>
            </div>

            <div class="control-group">
                @Html.LabelFor(model => model.PostModel.Comments, new {@class = "control-label"})
                <div class="controls">
                    @Html.EditorFor(model => model.PostModel.Comments)
                    @Html.ValidationMessageFor(model => model.PostModel.Comments)
                </div>
            </div>
        </fieldset>
    </div>
    
    <div class="form-actions">
        <input type="submit" value="Submit Job" class="btn btn-primary"/>
        @Html.ActionLink("Cancel", "Index", "Authorized", new { }, new { @class = "btn" })
    </div>
}

